/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.taskapp.api;

import java.math.BigDecimal;
import com.example.taskapp.model.PostTaskRequest;
import com.example.taskapp.model.PutTaskRequest;
import com.example.taskapp.model.Task;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-08-13T01:01:01.528731012+09:00[Asia/Tokyo]")
@Validated
@Tag(name = "task", description = "the task API")
public interface TasksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /tasks/{taskId} : タスクの削除
     * 登録しているタスクを削除する。 
     *
     * @param taskId TaskID (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deleteTask",
        summary = "タスクの削除",
        description = "登録しているタスクを削除する。 ",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tasks/{taskId}"
    )
    default ResponseEntity<Void> deleteTask(
        @Parameter(name = "taskId", description = "TaskID", required = true, in = ParameterIn.PATH) @PathVariable("taskId") BigDecimal taskId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks : タスク一覧の取得
     * 登録しているタスクをすべて取得する 
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTasks",
        summary = "タスク一覧の取得",
        description = "登録しているタスクをすべて取得する ",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Task.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Task>> getTasks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : 0, \"completed\" : true, \"title\" : \"title\" }, { \"id\" : 0, \"completed\" : true, \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /tasks : タスクの登録
     * タスクを登録する 
     *
     * @param postTaskRequest  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "postTask",
        summary = "タスクの登録",
        description = "タスクを登録する ",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tasks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Task> postTask(
        @Parameter(name = "PostTaskRequest", description = "", required = true) @Valid @RequestBody PostTaskRequest postTaskRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"completed\" : true, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /tasks/{taskId} : タスクステータスの更新
     * タスクのステータスを更新する。 
     *
     * @param taskId TaskID (required)
     * @param putTaskRequest  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "putTask",
        summary = "タスクステータスの更新",
        description = "タスクのステータスを更新する。 ",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tasks/{taskId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Task> putTask(
        @Parameter(name = "taskId", description = "TaskID", required = true, in = ParameterIn.PATH) @PathVariable("taskId") BigDecimal taskId,
        @Parameter(name = "PutTaskRequest", description = "", required = true) @Valid @RequestBody PutTaskRequest putTaskRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 0, \"completed\" : true, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
