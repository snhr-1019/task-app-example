/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.taskapp.api;

import com.example.taskapp.model.TaskRequest;
import com.example.taskapp.model.TaskResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-18T22:24:37.824749244+09:00[Asia/Tokyo]")
@Validated
@Tag(name = "task", description = "Task operations")
public interface TaskApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /task : Create Task
     *
     * @param taskRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createTask",
        summary = "Create Task",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> createTask(
        @Parameter(name = "TaskRequest", description = "") @Valid @RequestBody(required = false) TaskRequest taskRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /task/{code} : Delete task by code
     *
     * @param code  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteTask",
        summary = "Delete task by code",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/task/{code}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> deleteTask(
        @Parameter(name = "code", description = "", required = true, in = ParameterIn.PATH) @PathVariable("code") String code
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /task/{code} : Get task by code
     *
     * @param code  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTask",
        summary = "Get task by code",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/{code}",
        produces = { "application/json" }
    )
    default ResponseEntity<TaskResponse> getTask(
        @Parameter(name = "code", description = "", required = true, in = ParameterIn.PATH) @PathVariable("code") String code
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"ABC123\", \"title\" : \"牛乳を買う\", \"status\" : \"TODO\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /task : List tasks
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listTasks",
        summary = "List tasks",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TaskResponse>> listTasks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"code\" : \"ABC123\", \"title\" : \"牛乳を買う\", \"status\" : \"TODO\" }, { \"code\" : \"ABC123\", \"title\" : \"牛乳を買う\", \"status\" : \"TODO\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
